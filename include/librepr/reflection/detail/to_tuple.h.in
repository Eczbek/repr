#pragma once
#include <tuple>
#include <type_traits>

#include "arity.h"

@%max 64
@{
def member_list(maximum):
  return ', '.join(f"member_{idx}" for idx in range(maximum + 1))
}

namespace librepr::detail {

//NOLINTBEGIN
template <typename T>
requires (std::is_aggregate_v<T> && !std::is_array_v<T>)
constexpr auto to_tuple(T const& object) {
  constexpr auto member_count = arity<std::remove_cv_t<T>>;
  if constexpr (member_count == 0) {
    return std::tie();
  }
  @[for N in range(__max__)]@
  else if constexpr (member_count == @(N + 1)) {
    auto const& [@member_list(N)] = object;
    return std::tie(@member_list(N));
  } 
  @[end for]
}
//NOLINTEND
}
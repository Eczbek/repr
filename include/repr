#pragma once
#include <string>

#include <librepr/type_info.h>
#include <librepr/object_info.h>
#include <librepr/repr.h>

#include <type_traits>

namespace librepr {
struct repr_wrapper {
  template <typename T>
  auto operator()(T const& obj) const {
    //TODO this could be static once msvc supports it
    using typeinfo = librepr::TypeInfo<T>;
    if constexpr (not std::is_fundamental_v<typename typeinfo::type>){
      return std::format("{}{{{}}}", typeinfo::name(), typeinfo::dump(obj));
    }
    else {
      return typeinfo::dump(obj);
    }
  }
};


}  // namespace librepr


inline constexpr librepr::repr_wrapper repr {};

template <typename T>
inline constexpr librepr::TypeName<T> nameof {};
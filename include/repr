#pragma once

#include <string>

#include <librepr/detail/default.h>
#include <librepr/detail/visibility.h>

#include <librepr/typename.h>
#include <librepr/repr.h>

namespace librepr {
struct repr_wrapper {
  template <typename T>
    requires requires(T const& obj) {
      { librepr::repr(obj) } -> std::same_as<std::string>;
    }
  auto operator()(T const& obj) const  -> std::string {
    //TODO this could be static once msvc supports it
    return librepr::repr(obj); 
  }
};


}  // namespace librepr


inline constexpr librepr::repr_wrapper repr {};

template <typename T>
inline constexpr librepr::TypeName<T> nameof {};